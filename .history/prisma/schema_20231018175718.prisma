// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

datasource db {
  provider = "mysql"
  url = env("DATABASE_URL")
  relationMode = "prisma"
}


model Blog{
  id              String    @id @default(uuid())
  name            String
  userId          String
  billboards      BillboardBlog[] @relation("BlogToBillboard")
  categories      CategoryBlog[] @relation("BlogToCategoryBlog")
  // articles        Article[]  @relation("BlogToArticle")
  authors         Author[]   @relation("BlogToAuthor")
  subCategories   SubCategoryBlog[]  @relation("BlogToSubCategoryBlog")
  // boards         Board[] @relation("BlogToColumn")
  projects        Project[]
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt
}

model BillboardBlog {
  id          String @id @default(uuid())
  blogId      String
  blog        Blog @relation("BlogToBillboard", fields: [blogId], references: [id])
  label       String
  imageUrl    String
  authors     Author[] @relation("BillboardToAuthor")
  categories  CategoryBlog[]
  subCategories SubCategoryBlog[] @relation("BillboardBlogToSubCategoryBlog")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([blogId])
}

model CategoryBlog {
  id              String            @id @default(uuid())
  blogId          String
  blog            Blog              @relation("BlogToCategoryBlog", fields: [blogId], references: [id])
  billboardBlogId String      // Foreign Key to Billboard
  billboard       BillboardBlog     @relation(fields: [billboardBlogId], references: [id])
  name            String
  subcategories   SubCategoryBlog[] @relation("CategoryBlogToSubCategoryBlog")
  // articles        Article[]         @relation("CategoryBlogToArticle")
  blogarticles    Blogarticle[]
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt

  @@index([blogId])
  @@index([billboardBlogId])
}

model SubCategoryBlog {
  id              String      @id @default(uuid())
  blogId          String
  blog            Blog @relation("BlogToSubCategoryBlog", fields: [blogId], references: [id])
  billboardBlogId String      // Foreign Key to Billboard
  billboard       BillboardBlog   @relation("BillboardBlogToSubCategoryBlog",fields: [billboardBlogId], references: [id])
  categoryBlogId  String      // Foreign Key to Billboard
  categoryBlog    CategoryBlog   @relation("CategoryBlogToSubCategoryBlog",fields: [categoryBlogId], references: [id])
  name            String
  articles        Blogarticle?   @relation("SubCategoryBlogToArticle")
  
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt

  @@index([blogId])
  @@index([billboardBlogId])
  @@index([categoryBlogId])
}

// model Article {
//   id              String    @id @default(uuid())
//   blogId          String
//   blog            Blog @relation("BlogToArticle", fields: [blogId], references: [id])
//   subcategoryBlogId  String   // Foreign Key to Category
//   subCategory        SubCategoryBlog? @relation("SubCategoryBlogToArticle", fields: [subcategoryBlogId], references: [id])
//   categoryBlogId  String    // Foreign Key to Category
//   category        CategoryBlog  @relation("CategoryBlogToArticle", fields: [categoryBlogId], references: [id])
//   title           String
//   slug            String
//   description     String
//   subTitle        String
//   href            String
//   images          ImageBlog[]   // Relation to Image model
//   authorId        String
//   // author          Author    @relation("AuthorToArticle",fields: [authorId], references: [id])
//   createdAt       DateTime  @default(now())
//   updatedAt       DateTime  @updatedAt

//   @@index([blogId])
//   @@index([categoryBlogId])
//   // @@index([authorId])
//   @@index([subcategoryBlogId])
// }


// model ImageBlog {
//   id          String   @id @default(uuid())
//   articleId   String   // Foreign Key to Product
//   article     Article  @relation(fields: [articleId], references: [id], onDelete: Cascade)
//   url         String   // URL of the image
//   createdAt   DateTime @default(now())
//   updatedAt   DateTime @updatedAt

//   @@index([articleId])
// }

model Blogarticle {
  id String @id @default(uuid())
  userId String
  title String @db.Text
  description String? @db.Text
  imageUrl String? @db.Text
  price Float?
  isPublished Boolean @default(false)

  categoryId String?
  category CategoryBlog? @relation(fields: [categoryId], references: [id])

  subcatId String? @unique
  subcategory        SubCategoryBlog? @relation("SubCategoryBlogToArticle", fields: [subcatId], references: [id])

  authorId  String?
  author    Author ? @relation( fields: [authorId], references: [id])


  chapters Chapter[]
  attachments Attachment[]
  // purchases Purchase[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([categoryId])
  @@fulltext([title])
}

model Attachment {
  id String @id @default(uuid())
  name String
  url String @db.Text

  blogArticleId String
  article Blogarticle @relation(fields: [blogArticleId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([blogArticleId])
}

model Chapter {
  id String @id @default(uuid())
  title String
  description String? @db.Text
  videoUrl String? @db.Text
  imageUrl String? @db.Text
  position Int
  isPublished Boolean @default(false)
  isFree Boolean @default(false)
  href     String?

  muxData MuxData?
  
  blogarticleId String
  course Blogarticle @relation(fields: [blogarticleId], references: [id], onDelete: Cascade)
  userProgress UserProgress[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([blogarticleId])
}

model MuxData {
  id String @id @default(uuid())
  assetId String
  playbackId String?

  chapterId String @unique
  chapter Chapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)
}

model UserProgress {
  id String @id @default(uuid())
  userId String

  chapterId String
  chapter Chapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)

  isCompleted Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([chapterId])
  @@unique([userId, chapterId])
}


model Author {
  id           String   @id @default(uuid())
  blogId       String
  blog         Blog @relation("BlogToAuthor", fields: [blogId], references: [id])
  // articles     Article[]  @relation("AuthorToArticle")
  billboardBlogId String      // Foreign Key to Billboard
  billboard       BillboardBlog   @relation("BillboardToAuthor",fields: [billboardBlogId], references: [id])
  articles     Blogarticle[]
  firstName    String
  lastName     String
  email        String
  image        String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@index([blogId])
  
}

// model ImageAuthor {
//   id          String   @id @default(uuid())
//   authorId    String   @unique// Foreign Key to Product 
//   author      Author   @relation(fields: [authorId], references: [id])
//   url         String   // URL of the image
//   createdAt   DateTime @default(now())
//   updatedAt   DateTime @updatedAt

//   @@index([authorId])
// }




model Project {
  id            String         @id @default(uuid()) @map("_id") 
  name          String         @unique
  description   String
  slug          String         @unique
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  projectBoards ProjectBoard[]
  blogId        String         
  blog          Blog         @relation(fields: [blogId], references: [id])

  @@index([blogId])
}

model ProjectBoard {
  id        String    @id @default(uuid()) @map("_id") 
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  status    String
  order     Int
  slug      String
  features  Feature[]
  project   Project   @relation(fields: [projectId], references: [id])
  projectId String    

  @@unique([slug, status, projectId])
}

enum Priority {
  LOW
  MEDIUM
  HIGH
}

model Feature {
  id             String       @id @default(uuid()) @map("_id") 
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  slug           String
  name           String
  description    String
  priority       Priority     
  finishDate     DateTime
  order          Int
  projectBoard   ProjectBoard @relation(fields: [projectBoardId], references: [id])
  projectBoardId String       

  @@unique([slug, projectBoardId])
}